#!/usr/bin/env escript
main(Args) ->
  {ok, _} = net_kernel:start(['spigg_cli@127.0.0.1', longnames]),
  erlang:set_cookie(node(), 'spigg'),
  case net_adm:ping(spigg_node()) of
    pong -> ok;
    pang -> start_server()
  end,
  code:add_pathz(ebin_path()),
  run_cmd(Args).
  
start_server() ->
  io:format("Booting spigg server.~n"),
  os:cmd("erl -detached -name " ++
         atom_to_list(spigg_node()) ++
         " -setcookie spigg -s spigg_server start_link -pa " ++ ebin_path()),
  wait_until_up().

wait_until_up() ->
  Waiter = self(),
  WaitF = fun(Loop) ->
    case rpc:call(spigg_node(), erlang, registered, []) of
      L when is_list(L)  -> Waiter ! {self(), spigg_ready};
      {badrpc, nodedown} ->
        timer:sleep(200),
        Loop(Loop)
    end
  end,
  Pid = spawn(fun() -> WaitF(WaitF) end),
  receive
    {Pid, spigg_ready} ->
      io:format("Spigg server is up and running.~n")
  after
    3000 ->
      io:format("Spigg server failed to boot.~n"),
      halt(1)
  end.

ebin_path() ->
  ScriptPath = escript:script_name(),
  [_Script, _Dir|RevPath] = lists:reverse(re:split(ScriptPath, "/", [{return, list}])),
  Path = string:join(lists:reverse(RevPath), "/"),
  filename:absname(Path ++ "/ebin").

run_cmd(["stop"])                ->
  try spigg_server:stop()
  catch
    exit:{normal, _} -> io:format("Stopped gracefully.~n");
    _:_              -> io:format("Failed to gracefully stop the server. "
                                  "Shutting down anyway.~n")
  end,
  ok = rpc:call(spigg_node(), init, stop, []);
run_cmd(["analyze"|[_|_]=Files]) -> analyze(Files);
run_cmd(_)                       -> help().

analyze([])           -> ok;
analyze([File|Files]) ->
  Result = case spigg_analyze:beam(File) of
    {ok, DB}           ->
      ok = spigg_server:merge(DB),
      "ok";
    {error, not_found} -> "failed to read or parse"
  end,
  io:format("~s: ~s~n.", [File, Result]),
  analyze(Files).

help() ->
  io:format("spigg <command> [args]~n~n", []).

spigg_node() -> 'spigg@127.0.0.1'.
